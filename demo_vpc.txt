provider "aws" {
  region     = "ap-south-1"
}
resource "aws_vpc" "devopshint_vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "devopshint_vpc"
  }
}
resource "aws_subnet" "public_subnet" {
    vpc_id = "${aws_vpc.devopshint_vpc.id}"
    cidr_block = "10.0.1.0/24"
    map_public_ip_on_launch = "true"
    availability_zone = "ap-south-1a"

    tags = {
      Name = "public_subnet"
    }
}
resource "aws_subnet" "private_subnet" {
    vpc_id = "${aws_vpc.devopshint_vpc.id}"
    cidr_block = "10.0.2.0/24"
    map_public_ip_on_launch = "false"
    availability_zone = "ap-south-1a"

    tags = {
      Name = "private_subnet"
    }
}
resource "aws_internet_gateway" "demo_igw" {
    vpc_id = "${aws_vpc.devopshint_vpc.id}"
    tags = {
        Name = "demo_igw"
    }
}
resource "aws_route_table" "public_rt" {
    vpc_id = "${aws_vpc.devopshint_vpc.id}"
    
    route  {
        cidr_block = "0.0.0.0/0"
        gateway_id = "${aws_internet_gateway.demo_igw.id}" 
    }
    
    tags = {
        Name = "public_rt"
    }
}
resource "aws_route_table_association" "public_rt_subnet"{
    subnet_id = "${aws_subnet.public_subnet.id}"
    route_table_id = "${aws_route_table.public_rt.id}"
}
# Creating Nat Gateway
resource "aws_eip" "nat" {
  vpc = true
}

resource "aws_nat_gateway" "nat_gw" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public_subnet.id
  depends_on    = [aws_internet_gateway.demo_igw]
tags = {
    Name = "nat_gw"
  }
}

# Add routes for VPC
resource "aws_route_table" "dev-private" {
  vpc_id = aws_vpc.devopshint_vpc.id
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = "${aws_nat_gateway.nat_gw.id}" 
  }

  tags = {
    Name = "dev-private"
  }
}

# Creating route associations for private Subnets
resource "aws_route_table_association" "dev-private_assc" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.dev-private.id
}
resource "aws_security_group" "security_grp" {
    vpc_id = "${aws_vpc.devopshint_vpc.id}"
    
    egress {
        from_port = 0
        to_port = 0
        protocol = -1
        cidr_blocks = ["0.0.0.0/0"]
    }
    ingress {
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
    ingress {
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
    tags = {
        Name = "security_grp"
    }
}

resource "aws_instance" "public_inst" {
  ami           = "ami-0c1a7f89451184c8b"
  instance_type = "t2.micro"
  subnet_id = "${aws_subnet.public_subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.security_grp.id}"]
  key_name = "key11"
  tags = {
    Name = "public_inst"
  }
}
resource "aws_instance" "private_inst" {
  ami           = "ami-0c1a7f89451184c8b"
  instance_type = "t2.micro"
  subnet_id = "${aws_subnet.private_subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.security_grp.id}"]
  key_name = "key11"
  tags = {
    Name = "private_inst"
  }
}